# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:47:23+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class SectionType(Enum):
    SECTION_TYPE_UNSPECIFIED = 'SECTION_TYPE_UNSPECIFIED'
    SECTION_TYPE_SIM_LOCK = 'SECTION_TYPE_SIM_LOCK'
    SECTION_TYPE_ZERO_TOUCH = 'SECTION_TYPE_ZERO_TOUCH'


class ClaimDeviceResponse(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='The device ID of the claimed device.'
    )
    deviceName: Optional[str] = Field(
        None,
        description='The resource name of the device in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.',
    )


class TermsStatus(Enum):
    TERMS_STATUS_UNSPECIFIED = 'TERMS_STATUS_UNSPECIFIED'
    TERMS_STATUS_NOT_ACCEPTED = 'TERMS_STATUS_NOT_ACCEPTED'
    TERMS_STATUS_ACCEPTED = 'TERMS_STATUS_ACCEPTED'
    TERMS_STATUS_STALE = 'TERMS_STATUS_STALE'


class Configuration(BaseModel):
    companyName: Optional[str] = Field(
        None,
        description='Required. The name of the organization. Zero-touch enrollment shows this organization name to device users during device provisioning.',
    )
    configurationId: Optional[str] = Field(
        None,
        description='Output only. The ID of the configuration. Assigned by the server.',
    )
    configurationName: Optional[str] = Field(
        None,
        description="Required. A short name that describes the configuration's purpose. For example, _Sales team_ or _Temporary employees_. The zero-touch enrollment portal displays this name to IT admins.",
    )
    contactEmail: Optional[str] = Field(
        None,
        description='Required. The email address that device users can contact to get help. Zero-touch enrollment shows this email address to device users before device provisioning. The value is validated on input.',
    )
    contactPhone: Optional[str] = Field(
        None,
        description='Required. The telephone number that device users can call, using another device, to get help. Zero-touch enrollment shows this number to device users before device provisioning. Accepts numerals, spaces, the plus sign, hyphens, and parentheses.',
    )
    customMessage: Optional[str] = Field(
        None,
        description='A message, containing one or two sentences, to help device users get help or give them more details about what’s happening to their device. Zero-touch enrollment shows this message before the device is provisioned.',
    )
    dpcExtras: Optional[str] = Field(
        None,
        description='The JSON-formatted EMM provisioning extras that are passed to the DPC.',
    )
    dpcResourcePath: Optional[str] = Field(
        None,
        description='Required. The resource name of the selected DPC (device policy controller) in the format `customers/[CUSTOMER_ID]/dpcs/*`. To list the supported DPCs, call `customers.dpcs.list`.',
    )
    isDefault: Optional[bool] = Field(
        None,
        description="Required. Whether this is the default configuration that zero-touch enrollment applies to any new devices the organization purchases in the future. Only one customer configuration can be the default. Setting this value to `true`, changes the previous default configuration's `isDefault` value to `false`.",
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by the server.',
    )


class CustomerListConfigurationsResponse(BaseModel):
    configurations: Optional[List[Configuration]] = Field(
        None, description='The configurations.'
    )


class AdditionalService(Enum):
    ADDITIONAL_SERVICE_UNSPECIFIED = 'ADDITIONAL_SERVICE_UNSPECIFIED'
    DEVICE_PROTECTION = 'DEVICE_PROTECTION'


class DeviceClaim(BaseModel):
    additionalService: Optional[AdditionalService] = Field(
        None, description='The Additional service registered for the device.'
    )
    googleWorkspaceCustomerId: Optional[str] = Field(
        None,
        description='The ID of the Google Workspace account that owns the Chrome OS device.',
    )
    ownerCompanyId: Optional[str] = Field(
        None, description='The ID of the Customer that purchased the device.'
    )
    resellerId: Optional[str] = Field(
        None, description='The ID of the reseller that claimed the device.'
    )
    sectionType: Optional[SectionType] = Field(
        None, description='Output only. The type of claim made on the device.'
    )
    vacationModeExpireTime: Optional[str] = Field(
        None,
        description="The timestamp when the device will exit ‘vacation mode’. This value is present iff the device is in 'vacation mode'.",
    )
    vacationModeStartTime: Optional[str] = Field(
        None,
        description="The timestamp when the device was put into ‘vacation mode’. This value is present iff the device is in 'vacation mode'.",
    )


class DeviceType(Enum):
    DEVICE_TYPE_UNSPECIFIED = 'DEVICE_TYPE_UNSPECIFIED'
    DEVICE_TYPE_ANDROID = 'DEVICE_TYPE_ANDROID'
    DEVICE_TYPE_CHROME_OS = 'DEVICE_TYPE_CHROME_OS'


class DeviceIdentifier(BaseModel):
    chromeOsAttestedDeviceId: Optional[str] = Field(
        None,
        description='An identifier provided by OEMs, carried through the production and sales process. Only applicable to Chrome OS devices.',
    )
    deviceType: Optional[DeviceType] = Field(None, description='The type of the device')
    imei: Optional[str] = Field(
        None, description='The device’s IMEI number. Validated on input.'
    )
    manufacturer: Optional[str] = Field(
        None,
        description="The device manufacturer’s name. Matches the device's built-in value returned from `android.os.Build.MANUFACTURER`. Allowed values are listed in [Android manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).",
    )
    meid: Optional[str] = Field(None, description='The device’s MEID number.')
    model: Optional[str] = Field(
        None,
        description="The device model's name. Allowed values are listed in [Android models](/zero-touch/resources/manufacturer-names#model-names) and [Chrome OS models](https://support.google.com/chrome/a/answer/10130175#identify_compatible).",
    )
    serialNumber: Optional[str] = Field(
        None,
        description="The manufacturer's serial number for the device. This value might not be unique across different device models.",
    )


class DeviceMetadata(BaseModel):
    entries: Optional[Dict[str, str]] = Field(
        None, description='Metadata entries recorded as key-value pairs.'
    )


class DeviceReference(BaseModel):
    deviceId: Optional[str] = Field(None, description='The ID of the device.')
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None, description='The hardware IDs of the device.'
    )


class ProcessingStatus(Enum):
    BATCH_PROCESS_STATUS_UNSPECIFIED = 'BATCH_PROCESS_STATUS_UNSPECIFIED'
    BATCH_PROCESS_PENDING = 'BATCH_PROCESS_PENDING'
    BATCH_PROCESS_IN_PROGRESS = 'BATCH_PROCESS_IN_PROGRESS'
    BATCH_PROCESS_PROCESSED = 'BATCH_PROCESS_PROCESSED'


class DevicesLongRunningOperationMetadata(BaseModel):
    devicesCount: Optional[int] = Field(
        None,
        description="The number of metadata updates in the operation. This might be different from the number of updates in the request if the API can't parse some of the updates.",
    )
    processingStatus: Optional[ProcessingStatus] = Field(
        None, description='The processing status of the operation.'
    )
    progress: Optional[int] = Field(
        None,
        description="The processing progress of the operation. Measured as a number from 0 to 100. A value of 10O doesn't always mean the operation completed—check for the inclusion of a `done` field.",
    )


class Dpc(BaseModel):
    dpcName: Optional[str] = Field(
        None,
        description="Output only. The title of the DPC app in Google Play. For example, _Google Apps Device Policy_. Useful in an application's user interface.",
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The API resource name in the format `customers/[CUSTOMER_ID]/dpcs/[DPC_ID]`. Assigned by the server. To maintain a reference to a DPC across customer accounts, persist and match the last path component (`DPC_ID`).',
    )
    packageName: Optional[str] = Field(
        None,
        description="Output only. The DPC's Android application ID that looks like a Java package name. Zero-touch enrollment installs the DPC app onto a device using this identifier.",
    )


class Empty(BaseModel):
    pass


class FindDevicesByDeviceIdentifierRequest(BaseModel):
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None, description='Required. Required. The device identifier to search for.'
    )
    limit: Optional[str] = Field(
        None,
        description='Required. The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.',
    )
    pageToken: Optional[str] = Field(
        None, description='A token specifying which result page to return.'
    )


class FindDevicesByOwnerRequest(BaseModel):
    customerId: Optional[List[str]] = Field(
        None, description='The list of customer IDs to search for.'
    )
    googleWorkspaceCustomerId: Optional[List[str]] = Field(
        None, description='The list of IDs of Google Workspace accounts to search for.'
    )
    limit: Optional[str] = Field(
        None,
        description='Required. The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.',
    )
    pageToken: Optional[str] = Field(
        None, description='A token specifying which result page to return.'
    )
    sectionType: Optional[SectionType] = Field(
        None,
        description="Required. The section type of the device's provisioning record.",
    )


class GoogleWorkspaceAccount(BaseModel):
    customerId: Optional[str] = Field(None, description='Required. The customer ID.')
    preProvisioningTokens: Optional[List[str]] = Field(
        None,
        description='Output only. The pre-provisioning tokens previously used to claim devices.',
    )


class PartnerClaim(BaseModel):
    customerId: Optional[str] = Field(
        None, description='The ID of the customer for whom the device is being claimed.'
    )
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None, description='Required. Required. Device identifier of the device.'
    )
    deviceMetadata: Optional[DeviceMetadata] = Field(
        None, description='Required. The metadata to attach to the device at claim.'
    )
    googleWorkspaceCustomerId: Optional[str] = Field(
        None, description='The Google Workspace customer ID.'
    )
    preProvisioningToken: Optional[str] = Field(
        None, description='Optional. Must and can only be set for Chrome OS devices.'
    )
    sectionType: Optional[SectionType] = Field(
        None,
        description="Required. The section type of the device's provisioning record.",
    )
    simlockProfileId: Optional[str] = Field(
        None,
        description='Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.',
    )


class PartnerUnclaim(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='Required. Device ID of the device.'
    )
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None, description='Required. Device identifier of the device.'
    )
    sectionType: Optional[SectionType] = Field(
        None,
        description="Required. The section type of the device's provisioning record.",
    )
    vacationModeDays: Optional[int] = Field(
        None,
        description='Optional. The duration of the vacation unlock starting from when the request is processed. (1 day is treated as 24 hours)',
    )
    vacationModeExpireTime: Optional[str] = Field(
        None, description='Optional. The expiration time of the vacation unlock.'
    )


class Status1(Enum):
    SINGLE_DEVICE_STATUS_UNSPECIFIED = 'SINGLE_DEVICE_STATUS_UNSPECIFIED'
    SINGLE_DEVICE_STATUS_UNKNOWN_ERROR = 'SINGLE_DEVICE_STATUS_UNKNOWN_ERROR'
    SINGLE_DEVICE_STATUS_OTHER_ERROR = 'SINGLE_DEVICE_STATUS_OTHER_ERROR'
    SINGLE_DEVICE_STATUS_SUCCESS = 'SINGLE_DEVICE_STATUS_SUCCESS'
    SINGLE_DEVICE_STATUS_PERMISSION_DENIED = 'SINGLE_DEVICE_STATUS_PERMISSION_DENIED'
    SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER = (
        'SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER'
    )
    SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE = (
        'SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE'
    )
    SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS = 'SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS'
    SINGLE_DEVICE_STATUS_INVALID_TOKEN = 'SINGLE_DEVICE_STATUS_INVALID_TOKEN'
    SINGLE_DEVICE_STATUS_REVOKED_TOKEN = 'SINGLE_DEVICE_STATUS_REVOKED_TOKEN'


class PerDeviceStatusInBatch(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='If processing succeeds, the device ID of the device.'
    )
    errorIdentifier: Optional[str] = Field(
        None, description='If processing fails, the error type.'
    )
    errorMessage: Optional[str] = Field(
        None,
        description='If processing fails, a developer message explaining what went wrong.',
    )
    status: Optional[Status1] = Field(
        None, description='The result status of the device after processing.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class UnclaimDeviceRequest(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='Required. The device ID returned by `ClaimDevice`.'
    )
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None,
        description='Required. The device identifier you used when you claimed this device.',
    )
    sectionType: Optional[SectionType] = Field(
        None,
        description="Required. The section type of the device's provisioning record.",
    )
    vacationModeDays: Optional[int] = Field(
        None,
        description='The duration of the vacation unlock starting from when the request is processed. (1 day is treated as 24 hours)',
    )
    vacationModeExpireTime: Optional[str] = Field(
        None, description='The expiration time of the vacation unlock.'
    )


class UnclaimDevicesRequest(BaseModel):
    unclaims: Optional[List[PartnerUnclaim]] = Field(
        None, description='Required. The list of devices to unclaim.'
    )


class UpdateDeviceMetadataRequest(BaseModel):
    deviceMetadata: Optional[DeviceMetadata] = Field(
        None, description='Required. The metadata to attach to the device.'
    )


class UpdateMetadataArguments(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='Required. Device ID of the device.'
    )
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None, description='Required. Device identifier.'
    )
    deviceMetadata: Optional[DeviceMetadata] = Field(
        None, description='Required. The metadata to update.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ClaimDeviceRequest(BaseModel):
    customerId: Optional[str] = Field(
        None, description='The ID of the customer for whom the device is being claimed.'
    )
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None,
        description='Required. Required. The device identifier of the device to claim.',
    )
    deviceMetadata: Optional[DeviceMetadata] = Field(
        None, description='Optional. The metadata to attach to the device.'
    )
    googleWorkspaceCustomerId: Optional[str] = Field(
        None, description='The Google Workspace customer ID.'
    )
    preProvisioningToken: Optional[str] = Field(
        None, description='Optional. Must and can only be set for Chrome OS devices.'
    )
    sectionType: Optional[SectionType] = Field(
        None,
        description="Required. The section type of the device's provisioning record.",
    )
    simlockProfileId: Optional[str] = Field(
        None,
        description='Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.',
    )


class ClaimDevicesRequest(BaseModel):
    claims: Optional[List[PartnerClaim]] = Field(
        None, description='Required. A list of device claims.'
    )


class Company(BaseModel):
    adminEmails: Optional[List[str]] = Field(
        None,
        description="Optional. Email address of customer's users in the admin role. Each email address must be associated with a Google Account.",
    )
    companyId: Optional[str] = Field(
        None, description='Output only. The ID of the company. Assigned by the server.'
    )
    companyName: Optional[str] = Field(
        None,
        description="Required. The name of the company. For example _XYZ Corp_. Displayed to the company's employees in the zero-touch enrollment portal.",
    )
    googleWorkspaceAccount: Optional[GoogleWorkspaceAccount] = Field(
        None,
        description='Output only. The Google Workspace account associated with this customer. Only used for customer Companies.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Input only. The preferred locale of the customer represented as a BCP47 language code. This field is validated on input and requests containing unsupported language codes will be rejected. Supported language codes: Arabic (ar) Chinese (Hong Kong) (zh-HK) Chinese (Simplified) (zh-CN) Chinese (Traditional) (zh-TW) Czech (cs) Danish (da) Dutch (nl) English (UK) (en-GB) English (US) (en-US) Filipino (fil) Finnish (fi) French (fr) German (de) Hebrew (iw) Hindi (hi) Hungarian (hu) Indonesian (id) Italian (it) Japanese (ja) Korean (ko) Norwegian (Bokmal) (no) Polish (pl) Portuguese (Brazil) (pt-BR) Portuguese (Portugal) (pt-PT) Russian (ru) Spanish (es) Spanish (Latin America) (es-419) Swedish (sv) Thai (th) Turkish (tr) Ukrainian (uk) Vietnamese (vi)',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The API resource name of the company. The resource name is one of the following formats: * `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]` Assigned by the server.',
    )
    ownerEmails: Optional[List[str]] = Field(
        None,
        description="Required. Input only. Email address of customer's users in the owner role. At least one `owner_email` is required. Owners share the same access as admins but can also add, delete, and edit your organization's portal users.",
    )
    skipWelcomeEmail: Optional[bool] = Field(
        None,
        description='Input only. If set to true, welcome email will not be sent to the customer. It is recommended to skip the welcome email if devices will be claimed with additional DEVICE_PROTECTION service, as the customer will receive separate emails at device claim time. This field is ignored if this is not a Zero-touch customer.',
    )
    termsStatus: Optional[TermsStatus] = Field(
        None,
        description='Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.',
    )


class CreateCustomerRequest(BaseModel):
    customer: Optional[Company] = Field(
        None,
        description="Required. The company data to populate the new customer. Must contain a value for `companyName` and at least one `owner_email` that's associated with a Google Account. The values for `companyId` and `name` must be empty.",
    )


class CustomerApplyConfigurationRequest(BaseModel):
    configuration: Optional[str] = Field(
        None,
        description='Required. The configuration applied to the device in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`.',
    )
    device: Optional[DeviceReference] = Field(
        None,
        description='Required. The device the configuration is applied to. There are custom validations in ApplyConfigurationRequestValidator',
    )


class CustomerListCustomersResponse(BaseModel):
    customers: Optional[List[Company]] = Field(
        None, description='The customer accounts the calling user is a member of.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token used to access the next page of results. Omitted if no further results are available.',
    )


class CustomerListDpcsResponse(BaseModel):
    dpcs: Optional[List[Dpc]] = Field(
        None,
        description='The list of DPCs available to the customer that support zero-touch enrollment.',
    )


class CustomerRemoveConfigurationRequest(BaseModel):
    device: Optional[DeviceReference] = Field(
        None,
        description='Required. The device to remove the configuration from. There are custom validations in RemoveConfigurationRequestValidator',
    )


class CustomerUnclaimDeviceRequest(BaseModel):
    device: Optional[DeviceReference] = Field(
        None,
        description='Required. The device to unclaim. There are custom validations in UnclaimDeviceRequestValidator.',
    )


class Device(BaseModel):
    claims: Optional[List[DeviceClaim]] = Field(
        None,
        description='Output only. The provisioning claims for a device. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. Call `partners.devices.unclaim` or `partners.devices.unclaimAsync` to remove the device from zero-touch enrollment.',
    )
    configuration: Optional[str] = Field(
        None, description='Not available to resellers.'
    )
    deviceId: Optional[str] = Field(
        None, description='Output only. The ID of the device. Assigned by the server.'
    )
    deviceIdentifier: Optional[DeviceIdentifier] = Field(
        None,
        description='The hardware IDs that identify a manufactured device. To learn more, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).',
    )
    deviceMetadata: Optional[DeviceMetadata] = Field(
        None,
        description='The metadata attached to the device. Structured as key-value pairs. To learn more, read [Device metadata](https://developers.google.com/zero-touch/guides/metadata).',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The API resource name in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`. Assigned by the server.',
    )


class FindDevicesByDeviceIdentifierResponse(BaseModel):
    devices: Optional[List[Device]] = Field(None, description='Found devices.')
    nextPageToken: Optional[str] = Field(
        None,
        description='A token used to access the next page of results. Omitted if no further results are available.',
    )
    totalSize: Optional[int] = Field(
        None,
        description='The total count of items in the list irrespective of pagination.',
    )


class FindDevicesByOwnerResponse(BaseModel):
    devices: Optional[List[Device]] = Field(None, description="The customer's devices.")
    nextPageToken: Optional[str] = Field(
        None,
        description='A token used to access the next page of results. Omitted if no further results are available.',
    )
    totalSize: Optional[int] = Field(
        None,
        description='The total count of items in the list irrespective of pagination.',
    )


class ListCustomersResponse(BaseModel):
    customers: Optional[List[Company]] = Field(
        None, description='List of customers related to this reseller partner.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Omitted if no further results are available.',
    )
    totalSize: Optional[int] = Field(
        None,
        description='The total count of items in the list irrespective of pagination.',
    )


class ListVendorCustomersResponse(BaseModel):
    customers: Optional[List[Company]] = Field(
        None, description='List of customers of the vendor.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Omitted if no further results are available.',
    )
    totalSize: Optional[int] = Field(
        None,
        description='The total count of items in the list irrespective of pagination.',
    )


class ListVendorsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Omitted if no further results are available.',
    )
    totalSize: Optional[int] = Field(
        None,
        description='The total count of items in the list irrespective of pagination.',
    )
    vendors: Optional[List[Company]] = Field(
        None,
        description='List of vendors of the reseller partner. Fields `name`, `companyId` and `companyName` are populated to the Company object.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='This field will always be not set if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. In this case, error information for each device is set in `response.perDeviceStatus.result.status`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='This field will contain a `DevicesLongRunningOperationMetadata` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='This field will contain a `DevicesLongRunningOperationResponse` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.',
    )


class OperationPerDevice(BaseModel):
    claim: Optional[PartnerClaim] = Field(
        None,
        description='A copy of the original device-claim request received by the server.',
    )
    result: Optional[PerDeviceStatusInBatch] = Field(
        None, description='The processing result for each device.'
    )
    unclaim: Optional[PartnerUnclaim] = Field(
        None,
        description='A copy of the original device-unclaim request received by the server.',
    )
    updateMetadata: Optional[UpdateMetadataArguments] = Field(
        None,
        description='A copy of the original metadata-update request received by the server.',
    )


class UpdateDeviceMetadataInBatchRequest(BaseModel):
    updates: Optional[List[UpdateMetadataArguments]] = Field(
        None, description='Required. The list of metadata updates.'
    )


class CustomerListDevicesResponse(BaseModel):
    devices: Optional[List[Device]] = Field(None, description="The customer's devices.")
    nextPageToken: Optional[str] = Field(
        None,
        description='A token used to access the next page of results. Omitted if no further results are available.',
    )


class DevicesLongRunningOperationResponse(BaseModel):
    perDeviceStatus: Optional[List[OperationPerDevice]] = Field(
        None,
        description='The processing status for each device in the operation. One `PerDeviceStatus` per device. The list order matches the items in the original request.',
    )
    successCount: Optional[int] = Field(
        None,
        description='A summary of how many items in the operation the server processed successfully. Updated as the operation progresses.',
    )
